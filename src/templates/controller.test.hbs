{{!-- Controller Integration Test Template --}}
{{!-- Generated by @soapjs/integr8 --}}

{{#if imports}}
{{#each imports}}
import { {{this}} } from '{{@key}}';
{{/each}}
{{/if}}

{{#if setup}}
// Global setup
beforeAll(async () => {
  {{#if (endsWith configPath ".json")}}
  const config = require('{{relativePath testFilePath configPath}}');
  {{else}}
  const configModule = require('{{relativePath testFilePath configPath}}');
  const config = configModule.default || configModule;
  {{/if}}
  
  await setupEnvironment(config);
});

{{/if}}
{{#if teardown}}
// Global teardown
afterAll(async () => {
  await teardownEnvironment();
});

{{/if}}
describe('{{controllerName}} API Integration Tests', () => {
  {{#each endpoints}}
  describe('{{method}} {{path}}', () => {
    {{#each testScenarios}}
    test('{{description}}', async () => {
      const ctx = getEnvironmentContext();
      {{#if requestData}}
      const requestData = {{requestData}};
      {{/if}}
      
      {{#if queryParams}}
      const queryParams = {{queryParams}};
      {{/if}}
      
      {{#if pathParams}}
      const pathParams = {{pathParams}};
      {{/if}}
      
      {{#if (eq ../method "GET")}}
      const response = await ctx.http.{{lowercase ../method}}('{{../path}}'{{#if queryParams}}, { params: queryParams }{{/if}});
      {{/if}}
      
      {{#if (eq ../method "POST")}}
      const response = await ctx.http.{{lowercase ../method}}('{{../path}}', requestData);
      {{/if}}
      
      {{#if (eq ../method "PUT")}}
      const response = await ctx.http.{{lowercase ../method}}('{{../path}}', requestData);
      {{/if}}
      
      {{#if (eq ../method "PATCH")}}
      const response = await ctx.http.{{lowercase ../method}}('{{../path}}', requestData);
      {{/if}}
      
      {{#if (eq ../method "DELETE")}}
      const response = await ctx.http.{{lowercase ../method}}('{{../path}}');
      {{/if}}
      
      // TODO: Add proper assertions
      expect(response.status).toBe({{expectedStatus}});
      {{#if expectedResponse}}
      expect(response.data).toMatchObject({{expectedResponse}});
      {{/if}}
      expect(true).toBe(false); // This test needs implementation
    });
    {{/each}}
  });
  {{/each}}
});
