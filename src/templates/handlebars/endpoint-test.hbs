{{!-- Single Endpoint Integration Test Template --}}
{{!-- Generated by @soapjs/integr8 --}}

{{#if imports}}
{{#each imports}}
import { {{this}} } from '{{@key}}';
{{/each}}

{{/if}}
import { defineScenario, setupEnvironment, teardownEnvironment } from '@soapjs/integr8';

{{#if setup}}
// Global setup
beforeAll(async () => {
  const config = require('../integr8.config.ts').default;
  await setupEnvironment(config);
});

{{/if}}
{{#if teardown}}
// Global teardown
afterAll(async () => {
  await teardownEnvironment();
});

{{/if}}
describe('{{endpoint.method}} {{endpoint.path}} Integration Tests', () => {
  {{#if (eq endpoint.method "GET")}}
  test('should handle {{endpoint.method}} {{endpoint.path}}', async ({ http }) => {
    const response = await http.{{lowercase endpoint.method}}('{{endpoint.path}}');
    
    // TODO: Add proper assertions
    expect(response.status).toBe(200);
    expect(true).toBe(false); // This test needs implementation
  });
  {{/if}}
  
  {{#if (eq endpoint.method "POST")}}
  test('should handle {{endpoint.method}} {{endpoint.path}}', async ({ http }) => {
    const requestData = {
      // TODO: Add request data
    };
    
    const response = await http.{{lowercase endpoint.method}}('{{endpoint.path}}', requestData);
    
    // TODO: Add proper assertions
    expect(response.status).toBe(201);
    expect(true).toBe(false); // This test needs implementation
  });
  {{/if}}
  
  {{#if (eq endpoint.method "PUT")}}
  test('should handle {{endpoint.method}} {{endpoint.path}}', async ({ http }) => {
    const requestData = {
      // TODO: Add request data
    };
    
    const response = await http.{{lowercase endpoint.method}}('{{endpoint.path}}', requestData);
    
    // TODO: Add proper assertions
    expect(response.status).toBe(200);
    expect(true).toBe(false); // This test needs implementation
  });
  {{/if}}
  
  {{#if (eq endpoint.method "DELETE")}}
  test('should handle {{endpoint.method}} {{endpoint.path}}', async ({ http }) => {
    const response = await http.{{lowercase endpoint.method}}('{{endpoint.path}}');
    
    // TODO: Add proper assertions
    expect(response.status).toBe(204);
    expect(true).toBe(false); // This test needs implementation
  });
  {{/if}}
  
  {{#if (eq endpoint.method "PATCH")}}
  test('should handle {{endpoint.method}} {{endpoint.path}}', async ({ http }) => {
    const requestData = {
      // TODO: Add request data
    };
    
    const response = await http.{{lowercase endpoint.method}}('{{endpoint.path}}', requestData);
    
    // TODO: Add proper assertions
    expect(response.status).toBe(200);
    expect(true).toBe(false); // This test needs implementation
  });
  {{/if}}
});
